const http = require('http');

const PORT = 3001;
const HOST = '127.0.0.1';

const server = http.createServer((req, res) => {
    console.log('–ó–∞–ø–∏—Ç:', req.method, req.url);
    
    // CORS headers
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Headers', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
    res.setHeader('Content-Type', 'application/json');
    
    // OPTIONS –¥–ª—è CORS
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // Health check
    if (req.url === '/api/v1/health' && req.method === 'GET') {
        res.writeHead(200);
        res.end(JSON.stringify({
            success: true,
            message: '‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É 3001!',
            timestamp: new Date().toISOString()
        }));
        return;
    }
    
    // –ú–µ–Ω—é
    if (req.url === '/api/v1/menu' && req.method === 'GET') {
        res.writeHead(200);
        res.end(JSON.stringify({
            success: true,
            data: {
                items: [
                    {
                        id: "1",
                        name: "–ï—Å–ø—Ä–µ—Å–æ",
                        description: "–ö–ª–∞—Å–∏—á–Ω–∏–π –º—ñ—Ü–Ω–∏–π –µ—Å–ø—Ä–µ—Å–æ",
                        price: 35,
                        available: true
                    },
                    {
                        id: "2",
                        name: "–õ–∞—Ç—Ç–µ", 
                        description: "–ù—ñ–∂–Ω–∏–π –Ω–∞–ø—ñ–π –∑ –µ—Å–ø—Ä–µ—Å–æ —Ç–∞ –º–æ–ª–æ–∫–æ–º",
                        price: 45,
                        available: true
                    },
                    {
                        id: "3",
                        name: "–ö–∞–ø—É—á–∏–Ω–æ",
                        description: "–Ü–¥–µ–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å –µ—Å–ø—Ä–µ—Å–æ —Ç–∞ –ø—ñ–Ω–∫–∏",
                        price: 50,
                        available: true
                    }
                ]
            }
        }));
        return;
    }
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
    if (req.url === '/api/v1/orders' && req.method === 'POST') {
        let body = '';
        
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', () => {
            try {
                const orderData = JSON.parse(body);
                console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:', orderData.customerName);
                
                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
                if (!orderData.items || !orderData.customerName || !orderData.customerEmail) {
                    res.writeHead(400);
                    res.end(JSON.stringify({
                        success: false,
                        message: '–ó–∞–ø–æ–≤–Ω—ñ—Ç—å –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è'
                    }));
                    return;
                }
                
                // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—É–º–∏
                const totalAmount = orderData.items.reduce((sum, item) => {
                    return sum + (item.price * (item.quantity || 1));
                }, 0);
                
                // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                const order = {
                    orderNumber: 'COFFEE-' + Date.now(),
                    customerName: orderData.customerName,
                    customerEmail: orderData.customerEmail,
                    customerPhone: orderData.customerPhone || '',
                    items: orderData.items,
                    totalAmount: totalAmount,
                    orderType: orderData.orderType || 'pickup',
                    status: 'pending',
                    notes: orderData.notes || '',
                    createdAt: new Date()
                };
                
                res.writeHead(201);
                res.end(JSON.stringify({
                    success: true,
                    message: '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!',
                    data: { order }
                }));
                
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞:', error);
                res.writeHead(500);
                res.end(JSON.stringify({
                    success: false,
                    message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
                }));
            }
        });
        
        return;
    }
    
    // 404
    res.writeHead(404);
    res.end(JSON.stringify({
        success: false,
        message: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ'
    }));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, HOST, () => {
    console.log(`üéØ –°–ï–†–í–ï–† –ü–†–ê–¶–Æ–Ñ –ù–ê http://${HOST}:${PORT}`);
    console.log('');
    console.log('üìã –î–û–°–¢–£–ü–ù–Ü –ú–ê–†–®–†–£–¢–ò:');
    console.log('   ‚Ä¢ GET  http://127.0.0.1:3001/api/v1/health');
    console.log('   ‚Ä¢ GET  http://127.0.0.1:3001/api/v1/menu');
    console.log('   ‚Ä¢ POST http://127.0.0.1:3001/api/v1/orders');
    console.log('');
    console.log('‚úÖ –í–Ü–î–ö–†–ò–ô –ë–†–ê–£–ó–ï–† –Ü –¢–ï–°–¢–£–ô!');
});